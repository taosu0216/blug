// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: blug/v1/blug.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Blug_CreateNewFriendLink_FullMethodName = "/blug.v1.Blug/CreateNewFriendLink"
)

// BlugClient is the client API for Blug service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlugClient interface {
	// Friend service
	CreateNewFriendLink(ctx context.Context, in *CreateNewFriendLinkReq, opts ...grpc.CallOption) (*CreateNewFriendLinkResp, error)
}

type blugClient struct {
	cc grpc.ClientConnInterface
}

func NewBlugClient(cc grpc.ClientConnInterface) BlugClient {
	return &blugClient{cc}
}

func (c *blugClient) CreateNewFriendLink(ctx context.Context, in *CreateNewFriendLinkReq, opts ...grpc.CallOption) (*CreateNewFriendLinkResp, error) {
	out := new(CreateNewFriendLinkResp)
	err := c.cc.Invoke(ctx, Blug_CreateNewFriendLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlugServer is the server API for Blug service.
// All implementations must embed UnimplementedBlugServer
// for forward compatibility
type BlugServer interface {
	// Friend service
	CreateNewFriendLink(context.Context, *CreateNewFriendLinkReq) (*CreateNewFriendLinkResp, error)
	mustEmbedUnimplementedBlugServer()
}

// UnimplementedBlugServer must be embedded to have forward compatible implementations.
type UnimplementedBlugServer struct {
}

func (UnimplementedBlugServer) CreateNewFriendLink(context.Context, *CreateNewFriendLinkReq) (*CreateNewFriendLinkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewFriendLink not implemented")
}
func (UnimplementedBlugServer) mustEmbedUnimplementedBlugServer() {}

// UnsafeBlugServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlugServer will
// result in compilation errors.
type UnsafeBlugServer interface {
	mustEmbedUnimplementedBlugServer()
}

func RegisterBlugServer(s grpc.ServiceRegistrar, srv BlugServer) {
	s.RegisterService(&Blug_ServiceDesc, srv)
}

func _Blug_CreateNewFriendLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewFriendLinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlugServer).CreateNewFriendLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blug_CreateNewFriendLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlugServer).CreateNewFriendLink(ctx, req.(*CreateNewFriendLinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Blug_ServiceDesc is the grpc.ServiceDesc for Blug service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Blug_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blug.v1.Blug",
	HandlerType: (*BlugServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewFriendLink",
			Handler:    _Blug_CreateNewFriendLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blug/v1/blug.proto",
}
